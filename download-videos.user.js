// ==UserScript==
// @name         Download Videos from Gemini UI
// @namespace    http://tampermonkey.net/
// @version      1.2
// @description  A Tampermonkey script that adds a floating button to download
//               all video elements found on the page, especially useful for
//               downloading generated videos from the Gemini user interface.
// @author       Your Name (or leave as is)
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict'; // Enforce stricter parsing and error handling

    console.log("Tampermonkey script loaded: Waiting for user to click download button.");

    // Helper function to display a custom message box instead of alert().
    // This provides better user experience than disruptive alert pop-ups.
    function displayMessage(message, type = "info") {
        const messageBoxId = 'tampermonkeyMessageBox';
        let messageBox = document.getElementById(messageBoxId);

        // Create the message box if it doesn't already exist.
        if (!messageBox) {
            messageBox = document.createElement('div');
            messageBox.id = messageBoxId;
            // Apply basic styling for visibility and positioning.
            messageBox.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background-color: #333;
                color: white;
                padding: 15px;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                z-index: 10000;
                font-family: 'Inter', sans-serif;
                opacity: 0; /* Start hidden for fade-in effect */
                transition: opacity 0.5s ease-in-out;
                max-width: 300px;
                text-align: center;
            `;
            document.body.appendChild(messageBox);
        }

        // Set message content and background color based on message type.
        messageBox.textContent = message;
        switch (type) {
            case "success":
                messageBox.style.backgroundColor = "#4CAF50"; // Green for success
                break;
            case "warning":
                messageBox.style.backgroundColor = "#ff9800"; // Orange for warning
                break;
            case "error":
                messageBox.style.backgroundColor = "#f44336"; // Red for error
                break;
            default:
                messageBox.style.backgroundColor = "#333"; // Default dark grey for info
        }

        // Make the message box visible by setting opacity to 1.
        messageBox.style.opacity = '1';

        // Hide and remove the message box after 5 seconds.
        setTimeout(() => {
            messageBox.style.opacity = '0'; // Fade out.
            setTimeout(() => {
                // After fade out, remove the element from the DOM to clean up.
                if (messageBox.parentNode) {
                    messageBox.parentNode.removeChild(messageBox);
                }
            }, 500); // Wait for the transition to complete (0.5s).
        }, 5000); // Display for 5 seconds.
    }

    // Function to handle the video download logic.
    function downloadAllVideos() {
        // Select all video elements on the page.
        // This targets videos, including those potentially generated by Gemini.
        const videoElements = document.querySelectorAll('video');

        // If no video elements are found, display a message and exit.
        if (videoElements.length === 0) {
            displayMessage("No video elements found on this page.", "warning");
            console.log("No video elements found.");
            return;
        }

        let videosInitiatedForDownload = 0;

        // Iterate over each found video element.
        videoElements.forEach((video, index) => {
            const videoSrc = video.src; // Get the source URL of the video.

            // Skip if the video element does not have a source URL.
            if (!videoSrc) {
                console.warn(`Video element at index ${index} has no 'src' attribute. Skipping this video.`);
                return;
            }

            let filename = `downloaded_video_${index + 1}`; // Default filename base.

            try {
                const url = new URL(videoSrc); // Parse the video source URL.

                // 1. Try to get filename from 'filename' query parameter (e.g., ?filename=myvideo.mp4).
                const filenameParam = url.searchParams.get('filename');
                if (filenameParam && filenameParam.trim() !== '') {
                    filename = filenameParam.trim();
                } else {
                    // 2. Try to get filename from the last segment of the URL path.
                    const pathSegments = url.pathname.split('/');
                    const lastPathSegment = pathSegments[pathSegments.length - 1];

                    // If the last segment looks like a file (contains a dot), use it.
                    if (lastPathSegment && lastPathSegment.includes('.')) {
                        filename = lastPathSegment;
                    } else {
                        // 3. Fallback to a unique, timestamped filename if no clear filename is found.
                        // This ensures uniqueness and avoids overwriting files.
                        const timestamp = new Date().getTime();
                        filename = `gemini_video_${timestamp}_${index + 1}`;
                    }
                }

                // Ensure the filename has a common video extension if it doesn't already.
                // This helps the browser correctly identify the file type upon download.
                const knownExtensions = /\.(mp4|webm|ogg|mov|avi|flv|mkv)$/i;
                if (!filename.match(knownExtensions)) {
                    filename += '.mp4'; // Default to .mp4 if no recognized extension.
                }

            } catch (e) {
                // Log any errors during URL parsing or filename generation.
                console.error(`Error processing video URL or generating filename for ${videoSrc}:`, e);
                // Fallback to a generic timestamped filename in case of error.
                filename = `gemini_video_${new Date().getTime()}_${index + 1}.mp4`;
            }

            console.log(`Attempting to download video from: ${videoSrc} as ${filename}`);

            // Create a temporary anchor (<a>) element to trigger the download.
            const a = document.createElement('a');
            a.href = videoSrc; // Set the URL to download.
            a.download = filename; // Set the desired filename for the download.

            // Append the anchor element to the document body.
            // This is necessary for some browsers (e.g., Firefox) to properly
            // register the click event and initiate the download.
            document.body.appendChild(a);

            // Programmatically click the anchor element to start the download.
            a.click();

            // Remove the anchor element shortly after clicking.
            // A small delay ensures the click event has time to register before removal.
            setTimeout(() => {
                if (a.parentNode) { // Check if the element is still in the DOM before attempting to remove.
                    document.body.removeChild(a);
                }
            }, 100); // 100ms delay.

            videosInitiatedForDownload++; // Increment the counter for successfully initiated downloads.
        });

        // Display a message to the user indicating the status of the downloads.
        displayMessage(`Initiating download for ${videosInitiatedForDownload} video(s). Please check your browser's download manager.`, "success");

        console.log(`Tampermonkey script finished. Tried to initiate download for ${videosInitiatedForDownload} videos.`);
    }

    // Create the download button after the page loads.
    window.addEventListener('load', function() {
        const downloadButton = document.createElement('button');
        downloadButton.textContent = 'Download All Videos';
        downloadButton.id = 'tampermonkeyDownloadVideosButton';

        // Apply styling to the button.
        downloadButton.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #007bff; /* Blue */
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            font-size: 16px;
            font-family: 'Inter', sans-serif;
            z-index: 9999;
            transition: background-color 0.3s ease;
        `;

        // Add hover effect
        downloadButton.onmouseover = function() {
            this.style.backgroundColor = '#0056b3'; // Darker blue on hover
        };
        downloadButton.onmouseout = function() {
            this.style.backgroundColor = '#007bff'; // Original blue
        };

        // Add click event listener to the button.
        downloadButton.addEventListener('click', downloadAllVideos);

        // Append the button to the document body.
        document.body.appendChild(downloadButton);

        console.log("Download button created on the page.");
        displayMessage("Download 'All Videos' button added to the bottom right.", "info");
    });

})();
